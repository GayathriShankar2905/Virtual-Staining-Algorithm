% Clear workspace and close figures
clc;
clear;
close all;

% Step 1: Load the image
image_path = '1.0.jpg'; % Update with your image path
original_image = imread(image_path);

% Step 2: Resize the image to a desired size
desired_size = [512, 512];
resized_image = imresize(original_image, desired_size);

% Step 3: Convert the image to Grayscale
gray_image = rgb2gray(resized_image);

% Step 4: Contrast Enhancement
contrast_enhanced = imadjust(gray_image);

% Step 5: Sharpening
sharpening_kernel = [0 -1 0; -1 5 -1; 0 -1 0];
sharpened_image = imfilter(contrast_enhanced, sharpening_kernel);

% Step 6: Thresholding using Otsu's method to convert to binary image
level = graythresh(sharpened_image);
thresholded_image = imbinarize(sharpened_image, level);

% Step 7: Apply Morphological Open (Dilate then Erode with Circular SE)
SE = strel('disk', 9);  % Circular SE for open operation
morph_open = imopen(thresholded_image, SE);

% Step 8: Apply Morphological Close (Erode then Dilate with Circular SE)
morph_close = imclose(thresholded_image, SE);

% Step 9: Background Removal (Invert the image to ensure white cells)
background_removed = imcomplement(morph_open);

% Step 10: Dilation (expand bright regions)
dilated_image = imdilate(background_removed, SE);

% Step 11: Erosion (reduce the dilated regions)
final_image = imerode(dilated_image, SE);

% Step 13: Apply Edge Detection (Canny)
edges = edge(final_image, 'Canny'); % Canny edge detector

% Step 14: Multiply final_image with sharpened_image (element-wise multiplication)
% Convert both images to double precision for multiplication
final_image_gray = double(final_image);
sharpened_image_gray = double(sharpened_image);

% Element-wise multiplication in grayscale
multiplied_image = final_image_gray .* sharpened_image_gray;

% Normalize the multiplied image to 0-255 range for uint8
multiplied_image = mat2gray(multiplied_image);  % Normalize to [0,1]
multiplied_image = uint8(multiplied_image * 255);  % Scale to [0,255] and convert to uint8

% Step 15: Display Results

% Plotting the images in a 3x5 grid
figure;
subplot(3, 5, 1);
imshow(original_image);
title('Original Image');
axis on;

subplot(3, 5, 2);
imshow(resized_image);
title('Resized Image');
axis on;

subplot(3, 5, 3);
imshow(gray_image);
title('Grayscale Image');
axis on;

subplot(3, 5, 4);
imshow(contrast_enhanced);
title('Contrast Enhanced Image');
axis on;

subplot(3, 5, 5);
imshow(sharpened_image);
title('Sharpened Image');
axis on;

subplot(3, 5, 6);
imshow(thresholded_image);
title('Thresholded Image');
axis on;

subplot(3, 5, 7);
imshow(morph_open);
title('Morphological Open');
axis on;

subplot(3, 5, 8);
imshow(morph_close);
title('Morphological Close');
axis on;

subplot(3, 5, 9);
imshow(background_removed);
title('Background Removed');
axis on;

subplot(3, 5, 10);
imshow(dilated_image);
title('Dilated Image');
axis on;

subplot(3, 5, 11);
imshow(final_image);
title('Final Image (Cells White, Background Black)');
axis on;

subplot(3, 5, 12);
imshow(edges);
title('Edge Detection (Canny)');
axis on;

% Display multiplied image
figure;  % Create a new figure for the multiplied image
imshow(multiplied_image);
title('Multiplied Image (final_image * sharpened_image)');
axis on;

% Optional: Save the final processed image
imwrite(multiplied_image, 'multiplied_image.png');
disp('Multiplied image saved as multiplied_image.png');



%-------------------------------------------------

% Clear workspace and close all figures
clc;
clear;
close all;

% Define the target size for resizing
target_size = [512, 512];

% Specify the images to process (one set for green and another set for red labels)
green_images = {'1.1.jpg'};  % Green label image
red_images = {'1.2.jpg'};    % Red label image

processed_images = {};
green_overlay_image = [];
red_overlay_image = [];

% Process Green Label Images
for i = 1:length(green_images)
    img_name = green_images{i};
    
    % Read the image
    original_image = imread(img_name);
    
    % Resize the image
    resized_image = imresize(original_image, target_size);
    
    % Convert to grayscale
    gray_image = rgb2gray(resized_image);
    
    % Thresholding using Otsu's method
    level = graythresh(gray_image);
    bw_image = imbinarize(gray_image, level);
    
    % Apply Canny edge detection
    edges = edge(bw_image, 'Canny');
    
    % Create an empty RGB image for the overlay
    overlay_image = zeros(size(resized_image), 'uint8');
    
    % Place edges in the green channel
    overlay_image(:,:,2) = edges * 255;  % Green channel
    
    % Store the processed image
    processed_images{i} = overlay_image;
    
    % Store the green overlay image for addition
    green_overlay_image = overlay_image;
    
    % Display the processed image
    figure;
    imshow(overlay_image);
    title(['Processed Green Label: ', img_name]);
end

% Process Red Label Images
for i = 1:length(red_images)
    img_name = red_images{i};
    
    % Read the image
    original_image = imread(img_name);
    
    % Resize the image
    resized_image = imresize(original_image, target_size);
    
    % Convert to grayscale
    gray_image = rgb2gray(resized_image);
    
    % Thresholding using Otsu's method
    level = graythresh(gray_image);
    bw_image = imbinarize(gray_image, level);
    
    % Apply Canny edge detection
    edges = edge(bw_image, 'Canny');
    
    % Create an empty RGB image for the overlay
    overlay_image = zeros(size(resized_image), 'uint8');
    
    % Place edges in the red channel
    overlay_image(:,:,1) = edges * 255;  % Red channel
    
    % Store the processed image
    processed_images{end+1} = overlay_image;
    
    % Store the red overlay image for addition
    red_overlay_image = overlay_image;
    
    % Display the processed image
    figure;
    imshow(overlay_image);
    title(['Processed Red Label: ', img_name]);
end

% Add the Green and Red Overlay Images
if ~isempty(green_overlay_image) && ~isempty(red_overlay_image)
    % Ensure both images are of the same size
    green_overlay_image = imresize(green_overlay_image, target_size);
    red_overlay_image = imresize(red_overlay_image, target_size);
    
    % Add the green and red overlay images element-wise
    added_image = green_overlay_image + red_overlay_image;
    
    % Display the added image
    figure;
    imshow(added_image);
    title('Added Green and Red Label Images');
    
    % Save the added image
    imwrite(added_image, 'added_label_image.png');
    disp('Added label image saved as added_label_image.png');
else
    disp('Both green and red overlay images must be processed first!');
end

% Optionally, save the processed label images
for i = 1:length(processed_images)
    img_name = images_to_display{i};
    label_image_name = strcat(img_name(1:end-4), '_processed.png');
    imwrite(processed_images{i}, label_image_name);
    disp(['Processed label image saved as ', label_image_name]);
end
