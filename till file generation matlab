% Clear workspace and close figures
clc;
clear;
close all;

% Step 1: Load the image
image_path = '1.0.jpg'; % Update with your image path
original_image = imread(image_path);

% Step 2: Resize the image to a desired size
desired_size = [512, 512];
resized_image = imresize(original_image, desired_size);

% Step 3: Convert the image to Grayscale
gray_image = rgb2gray(resized_image);

% Step 4: Contrast Enhancement
contrast_enhanced = imadjust(gray_image);

% Step 5: Sharpening
sharpening_kernel = [0 -1 0; -1 5 -1; 0 -1 0];
sharpened_image = imfilter(contrast_enhanced, sharpening_kernel);

% Step 6: Thresholding using Otsu's method to convert to binary image
level = graythresh(sharpened_image);
thresholded_image = imbinarize(sharpened_image, level);

% Step 7: Apply Morphological Open (Dilate then Erode with Circular SE)
SE = strel('disk', 9);  % Circular SE for open operation
morph_open = imopen(thresholded_image, SE);

% Step 8: Apply Morphological Close (Erode then Dilate with Circular SE)
morph_close = imclose(thresholded_image, SE);

% Step 9: Background Removal (Invert the image to ensure white cells)
background_removed = imcomplement(morph_open);

% Step 10: Dilation (expand bright regions)
dilated_image = imdilate(background_removed, SE);

% Step 11: Erosion (reduce the dilated regions)
final_image = imerode(dilated_image, SE);

% Step 13: Apply Edge Detection (Canny)
edges = edge(final_image, 'Canny'); % Canny edge detector

% Step 14: Multiply final_image with sharpened_image (element-wise multiplication)
% Convert both images to double precision for multiplication
final_image_gray = double(final_image);
sharpened_image_gray = double(sharpened_image);

% Element-wise multiplication in grayscale
multiplied_image = final_image_gray .* sharpened_image_gray;

% Normalize the multiplied image to 0-255 range for uint8
multiplied_image = mat2gray(multiplied_image);  % Normalize to [0,1]
multiplied_image = uint8(multiplied_image * 255);  % Scale to [0,255] and convert to uint8

% Step 15: Display Results

% Plotting the images in a 3x5 grid
figure;
subplot(3, 5, 1);
imshow(original_image);
title('Original Image');
axis on;

subplot(3, 5, 2);
imshow(resized_image);
title('Resized Image');
axis on;

subplot(3, 5, 3);
imshow(gray_image);
title('Grayscale Image');
axis on;

subplot(3, 5, 4);
imshow(contrast_enhanced);
title('Contrast Enhanced Image');
axis on;

subplot(3, 5, 5);
imshow(sharpened_image);
title('Sharpened Image');
axis on;

subplot(3, 5, 6);
imshow(thresholded_image);
title('Thresholded Image');
axis on;

subplot(3, 5, 7);
imshow(morph_open);
title('Morphological Open');
axis on;

subplot(3, 5, 8);
imshow(morph_close);
title('Morphological Close');
axis on;

subplot(3, 5, 9);
imshow(background_removed);
title('Background Removed');
axis on;

subplot(3, 5, 10);
imshow(dilated_image);
title('Dilated Image');
axis on;

subplot(3, 5, 11);
imshow(final_image);
title('Final Image (Cells White, Background Black)');
axis on;

subplot(3, 5, 12);
imshow(edges);
title('Edge Detection (Canny)');
axis on;

% Display multiplied image
figure;  % Create a new figure for the multiplied image
imshow(multiplied_image);
title('Multiplied Image (final_image * sharpened_image)');
axis on;

% Clear workspace and close figures
clc;
clear;
close all;

% Step 1: Load the images
green_image_path = '1.1.jpg'; % Green channel input image
red_image_path = '1.2.jpg'; % Red channel input image
multiplied_image_path = 'multiplied_image.png'; % Multiplied image

green_image = imread(green_image_path);
red_image = imread(red_image_path);
multiplied_image = imread(multiplied_image_path);

% Step 2: Resize images to match dimensions if needed
desired_size = [512, 512];
green_image = imresize(green_image, desired_size);
red_image = imresize(red_image, desired_size);
multiplied_image = imresize(multiplied_image, desired_size);

% Step 3: Convert green and red images to grayscale if they are RGB
if size(green_image, 3) == 3
    green_channel = rgb2gray(green_image);
else
    green_channel = green_image;
end

if size(red_image, 3) == 3
    red_channel = rgb2gray(red_image);
else
    red_channel = red_image;
end

% Step 4: Normalize channels for better visibility
green_channel = im2double(green_channel);
red_channel = im2double(red_channel);

% Step 5: Enhance green and red channels (contrast adjustment)
green_channel = imadjust(green_channel);
red_channel = imadjust(red_channel);

% Step 6: Create the final RGB image with enhanced red and green channels
final_image = zeros([desired_size, 3]);
final_image(:, :, 1) = red_channel; % Red channel
final_image(:, :, 2) = green_channel; % Green channel
% Set the blue channel to zero as required
final_image(:, :, 3) = 0;


% Overlay edges on the final image for better visualization
final_image_with_edges = final_image;
final_image_with_edges(:, :, 1) = final_image_with_edges(:, :, 1) ; % Highlight edges in red

% Step 8: Display the results
figure;
imshow(final_image);
title('Combined Red and Green Channel Image with Blue Set to 0');

figure;
imshow(final_image_with_edges);
title('Final Image with Edge Detection Overlay');

% Optional: Save the final processed images
imwrite(final_image, 'final_red_green_image.png');
imwrite(final_image_with_edges, 'final_image_with_edges.png');
disp('Images saved as final_red_green_image.png and final_image_with_edges.png');
