import os
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Path to input folder containing images
input_folder = '/content/Brightfield'  # Replace with your input folder path
output_folder = '/content/Preprocessed'      # Folder where preprocessed images will be saved

# Create the output folder if it doesn't exist
os.makedirs(output_folder, exist_ok=True)

# Function to preprocess the images and display each step for one specified image
def preprocess_image(image, display=False):
    # Step 2: Resize the image to a desired size
    desired_size = (512, 512)
    resized_image = cv2.resize(image, desired_size)

    # Step 3: Convert the image to Grayscale
    gray_image = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)

    # Step 4: Contrast Enhancement
    contrast_enhanced = cv2.convertScaleAbs(gray_image, alpha=1.5, beta=0)

    # Step 5: Sharpening
    sharpening_kernel = np.array([[0, -1, 0],
                                  [-1, 5, -1],
                                  [0, -1, 0]])
    sharpened_image = cv2.filter2D(contrast_enhanced, -1, sharpening_kernel)

    # Step 6: Apply Semi-Thresholding
    threshold_value = 127
    _, semi_thresholded = cv2.threshold(gray_image, threshold_value, 255, cv2.THRESH_TOZERO)

    # Step 7: Apply Morphological Open (Dilate then Erode with Circular SE)
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (21, 21))
    morph_open = cv2.dilate(semi_thresholded, kernel, iterations=1)
    morph_open = cv2.erode(morph_open, kernel, iterations=1)

    # Step 8: Multiply Sharpened Image with Morphological Open
    sharpened_image_resized = cv2.resize(sharpened_image, (morph_open.shape[1], morph_open.shape[0]))
    multiplied_image = cv2.bitwise_and(sharpened_image_resized, morph_open)

    if display:
        # Display each step
        plt.figure(figsize=(20, 10))
        
        # Original Image
        plt.subplot(3, 4, 1)
        plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
        plt.title('Original Image')
        plt.axis('off')
        
        # Resized Image
        plt.subplot(3, 4, 2)
        plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
        plt.title('Resized Image')
        plt.axis('off')
        
        # Grayscale Image
        plt.subplot(3, 4, 3)
        plt.imshow(gray_image, cmap='gray')
        plt.title('Grayscale Image')
        plt.axis('off')
        
        # Contrast Enhanced Image
        plt.subplot(3, 4, 4)
        plt.imshow(contrast_enhanced, cmap='gray')
        plt.title('Contrast Enhanced')
        plt.axis('off')
        
        # Sharpened Image
        plt.subplot(3, 4, 5)
        plt.imshow(sharpened_image, cmap='gray')
        plt.title('Sharpened Image')
        plt.axis('off')
        
        # Semi-Thresholded Image
        plt.subplot(3, 4, 6)
        plt.imshow(semi_thresholded, cmap='gray')
        plt.title('Semi-Thresholded Image')
        plt.axis('off')
        
        # Morphological Open Image
        plt.subplot(3, 4, 7)
        plt.imshow(morph_open, cmap='gray')
        plt.title('Morphological Open')
        plt.axis('off')
        
        # Multiplied Image (Sharpened * Morph Open)
        plt.subplot(3, 4, 8)
        plt.imshow(multiplied_image, cmap='gray')
        plt.title('Multiplied Image (Sharpened * Morph Open)')
        plt.axis('off')
        
        plt.tight_layout()
        plt.show()

    return multiplied_image

# Iterate over each image in the input folder and preprocess
for image_file in os.listdir(input_folder):
    if image_file.endswith(('.png', '.jpg', '.jpeg')):
        image_path = os.path.join(input_folder, image_file)
        image = cv2.imread(image_path)
        
        if image is not None:
            # Preprocess the image and save it
            multiplied_image = preprocess_image(image, display=(image_file == '1.1.jpg'))  # Display steps for '1.1.jpg'
            output_path = os.path.join(output_folder, image_file)
            cv2.imwrite(output_path, multiplied_image)
        else:
            print(f"Failed to load image: {image_file}")



import os
import cv2
import numpy as np
from matplotlib import pyplot as plt
from skimage import exposure

# Define paths to green and red image folders
green_folder = '/content/Green folder'  # Update with the actual path
red_folder = '/content/Red'      # Update with the actual path
output_folder = '/content/labels'  # Folder to save the labeled images

# Create the output folder if it doesn't exist
os.makedirs(output_folder, exist_ok=True)

# Clear the output folder before saving new images
for filename in os.listdir(output_folder):
    file_path = os.path.join(output_folder, filename)
    if os.path.isfile(file_path):
        os.remove(file_path)

# List image filenames from both folders
green_filenames = sorted([f for f in os.listdir(green_folder) if f.endswith('.jpg')])
red_filenames = sorted([f for f in os.listdir(red_folder) if f.endswith('.jpg')])

# Print file names for debugging
print(f"Green Folder Files: {green_filenames}")
print(f"Red Folder Files: {red_filenames}")

# Match and process pairs by their naming convention
for green_file, red_file in zip(green_filenames, red_filenames):
    print(f"Processing: Green File: {green_file}, Red File: {red_file}")
    
    if green_file.split('.')[0] == red_file.split('.')[0]:  # Match by base name
        # Load images
        green_image_path = os.path.join(green_folder, green_file)
        red_image_path = os.path.join(red_folder, red_file)
        
        green_image = cv2.imread(green_image_path)
        red_image = cv2.imread(red_image_path)
        
        # Check if images are loaded correctly
        if green_image is None:
            print(f"Error loading green image at {green_image_path}")
            continue
        if red_image is None:
            print(f"Error loading red image at {red_image_path}")
            continue
        
        # Resize images to the desired size
        desired_size = (256, 256)  # Example size, update as needed
        green_image = cv2.resize(green_image, desired_size)
        red_image = cv2.resize(red_image, desired_size)
        
        # Convert to grayscale if necessary
        green_channel = cv2.cvtColor(green_image, cv2.COLOR_BGR2GRAY) if green_image.shape[2] == 3 else green_image
        red_channel = cv2.cvtColor(red_image, cv2.COLOR_BGR2GRAY) if red_image.shape[2] == 3 else red_image
        
        # Normalize channels
        green_channel = cv2.normalize(green_channel.astype(np.float32), None, 0, 1, cv2.NORM_MINMAX)
        red_channel = cv2.normalize(red_channel.astype(np.float32), None, 0, 1, cv2.NORM_MINMAX)
        
        # Enhance channels for visibility
        green_channel = exposure.rescale_intensity(green_channel, in_range='image')
        red_channel = exposure.rescale_intensity(red_channel, in_range='image')
        
        # Create the final RGB image with red in the red channel and green in the green channel
        final_image_rgb = np.zeros((desired_size[0], desired_size[1], 3), dtype=np.float32)
        final_image_rgb[:, :, 1] = green_channel  # Green channel
        final_image_rgb[:, :, 2] = red_channel    # Red channel
        final_image_rgb[:, :, 0] = 0  # Blue channel remains zero
        
        # Save the processed image for U-Net input
        final_rgb_path = os.path.join(output_folder, f'{green_file.split(".")[0]}_combined.png')
        
        # Save the image and check if it is successful
        if cv2.imwrite(final_rgb_path, (final_image_rgb * 255).astype(np.uint8)):
            print(f'Saved combined image as {final_rgb_path}')
        else:
            print(f"Failed to save image at {final_rgb_path}")

# Check if output folder has images
output_files = os.listdir(output_folder)
if not output_files:
    print("No images saved in the output folder.")
else:
    print(f"Files in the output folder: {output_files}")

# Visualization of one output image
sample_image_path = os.path.join(output_folder, f'{green_filenames[0].split(".")[0]}_combined.png')

# Ensure the image exists before trying to load
if os.path.exists(sample_image_path):
    sample_image = cv2.imread(sample_image_path)
    
    if sample_image is not None:
        # Display the sample image
        plt.figure()
        plt.imshow(cv2.cvtColor(sample_image, cv2.COLOR_BGR2RGB))
        plt.title(f'Sample Image: {green_filenames[0].split(".")[0]}')
        plt.axis('off')
        plt.show()
    else:
        print(f"Failed to load sample image at {sample_image_path}")
else:
    print(f"Sample image file does not exist at {sample_image_path}")


import os
import cv2
import numpy as np
from matplotlib import pyplot as plt

# Define paths to the preprocessed and label image folders
preprocessed_folder = '/content/Preprocessed'  # Update with your actual preprocessed folder path
label_folder = '/content/labels'               # Update with your actual label folder path
output_folder = '/content/TestingFolderforUNET'  # Folder to save the result images

# Clear the output folder by deleting all existing files
for file in os.listdir(output_folder):
    file_path = os.path.join(output_folder, file)
    if os.path.isfile(file_path):
        os.remove(file_path)

# Create the output folder if it doesn't exist
os.makedirs(output_folder, exist_ok=True)

# List filenames from both folders
preprocessed_filenames = sorted([f for f in os.listdir(preprocessed_folder) if f.endswith('.jpg')])
label_filenames = sorted([f for f in os.listdir(label_folder) if f.endswith('.png')])

# Print filenames for debugging
print(f"Preprocessed Folder Files: {preprocessed_filenames}")
print(f"Label Folder Files: {label_filenames}")

# Process images by matching filenames
for preprocessed_file in preprocessed_filenames:
    # Check if the corresponding label image exists based on the base filename (e.g., 1.0.jpg -> 1_combined.png)
    base_filename = preprocessed_file.split('.')[0]  # Extract base name (e.g., 1.0 -> 1)
    label_file = f"{base_filename}_combined.png"  # Construct corresponding label filename

    # Check if the label file exists in the label folder
    if label_file in label_filenames:
        print(f"Processing: {preprocessed_file} and {label_file}")
        
        # Load the preprocessed image and the label image
        preprocessed_image_path = os.path.join(preprocessed_folder, preprocessed_file)
        label_image_path = os.path.join(label_folder, label_file)
        
        preprocessed_image = cv2.imread(preprocessed_image_path)
        label_image = cv2.imread(label_image_path)

        # Check if images are loaded correctly
        if preprocessed_image is None:
            print(f"Error loading preprocessed image at {preprocessed_image_path}")
            continue
        if label_image is None:
            print(f"Error loading label image at {label_image_path}")
            continue
        
        # Resize images to the same size if necessary
        desired_size = (256, 256)  # Update this size as needed
        preprocessed_image = cv2.resize(preprocessed_image, desired_size)
        label_image = cv2.resize(label_image, desired_size)
        
        # Normalize images to [0, 1] range for multiplication
        preprocessed_image = preprocessed_image.astype(np.float32) / 255.0
        label_image = label_image.astype(np.float32) / 255.0
        
        # Multiply the images element-wise (preserving color)
        multiplied_image = np.multiply(preprocessed_image, label_image)

        # Normalize the multiplied image to [0, 1] range
        multiplied_image = np.clip(multiplied_image, 0, 1)

        # Convert the multiplied image back to [0, 255] range for saving/displaying
        multiplied_image = (multiplied_image * 255).astype(np.uint8)

        # Extract the green and red channels from the label image
        green_channel = label_image[:, :, 1]  # Extract the green channel
        red_channel = label_image[:, :, 2]    # Extract the red channel

        # Brighten the green and red channels by increasing their intensity
        green_channel_bright = cv2.convertScaleAbs(green_channel * 255, alpha=1.2, beta=30)
        red_channel_bright = cv2.convertScaleAbs(red_channel * 255, alpha=1.2, beta=30)

        # Create a new label image with brightened green and red channels
        brightened_label_image = label_image.copy()
        brightened_label_image[:, :, 1] = green_channel_bright / 255.0
        brightened_label_image[:, :, 2] = red_channel_bright / 255.0

        # Multiply the original preprocessed image with the brightened label image
        final_image = np.multiply(preprocessed_image, brightened_label_image)

        # Normalize the final image to [0, 1] range
        final_image = np.clip(final_image, 0, 1)

        # Convert the final image back to [0, 255] range for saving/displaying
        final_image = (final_image * 255).astype(np.uint8)

        # Save the final image with brightened green and red areas
        output_path = os.path.join(output_folder, f"{base_filename}_brightened.png")
        cv2.imwrite(output_path, final_image)
        print(f"Saved final image with brightened cells as {output_path}")

# Check if the output folder has images
output_files = os.listdir(output_folder)
if not output_files:
    print("No images saved in the output folder.")
else:
    print(f"Files in the output folder: {output_files}")

# Optional: Visualize one of the output images
sample_image_path = os.path.join(output_folder, f"{preprocessed_filenames[0].split('.')[0]}_brightened.png")

if os.path.exists(sample_image_path):
    sample_image = cv2.imread(sample_image_path)
    
    if sample_image is not None:
        plt.figure()
        plt.imshow(cv2.cvtColor(sample_image, cv2.COLOR_BGR2RGB))
        plt.title(f'Sample Brightened Image: {preprocessed_filenames[0].split(".")[0]}')
        plt.axis('off')
        plt.show()
    else:
        print(f"Failed to load sample image at {sample_image_path}")
else:
    print(f"Sample image file does not exist at {sample_image_path}")
