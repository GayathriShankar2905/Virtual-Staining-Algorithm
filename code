import cv2
import numpy as np
import matplotlib.pyplot as plt
import os
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Define input folder
input_folder = '/content/drive/MyDrive/brightfield-vs-fluorescent-staining-dataset'

# Get a list of directories and images
input_files = os.listdir(input_folder)

# Iterate over each file/directory in the input folder
for file in input_files:
    full_path = os.path.join(input_folder, file)
    
    # Check if it's a directory
    if os.path.isdir(full_path):
        # List all files in the directory
        image_files = os.listdir(full_path)
        
        for image_file in image_files:
            image_path = os.path.join(full_path, image_file)
            # Check for common image file extensions
            if image_file.endswith(('.png', '.jpg', '.jpeg', '.bmp', '.tiff')):
                print("Loading image:", image_path)
                original_image = cv2.imread(image_path)

                # Check if the image was loaded successfully
                if original_image is not None:
                    # Continue with processing...
                    desired_size = (512, 512)
                    resized_image = cv2.resize(original_image, desired_size)

                    # Process and display images as before...
                    # (Include all the image processing steps here)
                else:
                    print(f"Error: Could not load image at {image_path}.")




# Specify the subdirectory and image name you want to process
subdirectory = 'Set_1_Cam_AO_PI_19_02_16'  # Replace with your specific subdirectory name
image_name = '1.0.jpg'  # Replace with the specific image filename (e.g., 'n.0.jpg')

# Construct the full path to the specific image
image_path = os.path.join(input_folder, subdirectory, image_name)

print("Loading image:", image_path)
original_image = cv2.imread(image_path)

# Check if the image was loaded successfully
if original_image is not None:
    # Step 1: Resize the image to a desired size
    desired_size = (512, 512)
    resized_image = cv2.resize(original_image, desired_size)

    # Step 2: Convert the image to Grayscale
    gray_image = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)

    # Step 3: Contrast Enhancement
    contrast_enhanced = cv2.convertScaleAbs(gray_image, alpha=1.5, beta=0)

    # Step 4: Sharpening
    sharpening_kernel = np.array([[0, -1, 0],
                                  [-1, 5, -1],
                                  [0, -1, 0]])
    sharpened_image = cv2.filter2D(contrast_enhanced, -1, sharpening_kernel)

    # Step 5: Background Removal using adaptive thresholding
    _, background_removed = cv2.threshold(sharpened_image, 127, 255, cv2.THRESH_BINARY_INV)

    # Step 6: Thresholding using Otsu's method
    _, thresholded_image = cv2.threshold(sharpened_image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

    # Step 7: Morphological Operations
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))
    morph_open = cv2.morphologyEx(thresholded_image, cv2.MORPH_OPEN, kernel)
    morph_close = cv2.morphologyEx(morph_open, cv2.MORPH_CLOSE, kernel)

    # Convert the final morphological image to 3 channels
    morph_colored = cv2.cvtColor(morph_close, cv2.COLOR_GRAY2BGR)

    # Step 8: Multiply Morphological Image with Original Image
    morph_colored = cv2.resize(morph_colored, (original_image.shape[1], original_image.shape[0]))
    multiplied_image = cv2.bitwise_and(original_image, morph_colored)

    # Step 9: Histogram Equalization
    histogram_equalized = cv2.equalizeHist(gray_image)

    # Display Results
    plt.figure(figsize=(15, 10))

    # Display Original Image
    plt.subplot(3, 4, 1)
    plt.imshow(cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB))
    plt.title('Original Image')
    plt.axis('off')

    # Display Resized Image
    plt.subplot(3, 4, 2)
    plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
    plt.title('Resized Image')
    plt.axis('off')

    # Display Grayscale Image
    plt.subplot(3, 4, 3)
    plt.imshow(gray_image, cmap='gray')
    plt.title('Grayscale Image')
    plt.axis('off')

    # Display Contrast Enhanced Image
    plt.subplot(3, 4, 4)
    plt.imshow(contrast_enhanced, cmap='gray')
    plt.title('Contrast Enhanced')
    plt.axis('off')

    # Display Sharpened Image
    plt.subplot(3, 4, 5)
    plt.imshow(sharpened_image, cmap='gray')
    plt.title('Sharpened Image')
    plt.axis('off')

    # Display Background Removed Image
    plt.subplot(3, 4, 6)
    plt.imshow(background_removed, cmap='gray')
    plt.title('Background Removed')
    plt.axis('off')

    # Display Thresholded Image (Otsu's)
    plt.subplot(3, 4, 7)
    plt.imshow(thresholded_image, cmap='gray')
    plt.title('Thresholded Image (Otsu)')
    plt.axis('off')

    # Display Morphological Open Image
    plt.subplot(3, 4, 8)
    plt.imshow(morph_open, cmap='gray')
    plt.title('Morphological Open')
    plt.axis('off')

    # Display Morphological Close Image
    plt.subplot(3, 4, 9)
    plt.imshow(morph_close, cmap='gray')
    plt.title('Morphological Close')
    plt.axis('off')

    # Display Multiplied Image with Original
    plt.subplot(3, 4, 10)
    plt.imshow(cv2.cvtColor(multiplied_image, cv2.COLOR_BGR2RGB))
    plt.title('Multiplied with Original')
    plt.axis('off')

    # Display Histogram Equalized Image
    plt.subplot(3, 4, 11)
    plt.imshow(histogram_equalized, cmap='gray')
    plt.title('Histogram Equalized Image')
    plt.axis('off')

    plt.tight_layout()
    plt.show()

else:
    print(f"Error: Could not load image at {image_path}.")
